JS高级 - ECMAScript + DOM +BOM
回顾第二阶段内容:
    1. 基本数据类型
          number string boolean null undefined
    2. 引用类型
          Array Object 
    3. 内置对象
          Number String Boolean Array Object Function Math RegExp Date Global Error

    面向对象:
        继承: 通过原型来继承的 protype
        1. 定义一个构造函数
            function Student(sname){
              this.sname = name
              ...
              Student.prototype.getName = f(){
                console.log(this.sname)
              }
            }
        2. 把公共方法定义在原型上
        3. new 构造函数
            var xm = new Student('小明');
            new做的事情:
              1. 创建一个新对象
              2. 构造函数的prototype属性指向它的原型对象,this指向实例化出来的对象xm
              3. xm对象的__proto__ 属性指向原型对象
              4. 执行构造函数内部代码


~~与服务器通信
  1. HTTP协议
  2. Ajax

    - Ajax的基本概念
     1. AsynChronous  JavaScript  And Xml
        异步的js和xml
        概念: Ajax是在不刷新浏览器的情况下,浏览器异步的,悄悄的向服务器发送HTTP请求,服务器接受请求并响应数据,浏览器解析数据,页面实现局部刷新

     2. Ajax 不是一门新的变成语言,只是一系列web技术的集合.      HTML CSS JS DOM XML JSON ...
          优点: 用户体验好    异步通信,相应数据更快
          缺点: 存在安全问题,破坏了浏览器的后退机制
     3. 原生的使用方法
          创建5步:
              1. 创建XMLHttpRequest(Ajax的核心对象) 对象
                 它属于BOM对象  
                 var xhr = new 创建XMLHttpRequest();  
              2. 建立连接
                 xhr.open(method,url,async)
                    method: 请求方式 get/post
                    url:    请求地址
                    async:  是否发送异步请求  true
              3. 发送请求
                 xhr.send(data)
              4. 监听请求 - 监听通信状态改变事件
                 xhr.onreadystatechange = function(){
                   // 事件处理函数
                   if(xhr.readyState===4 && xhr.status===200){
                     5. 处理数据
                        xhr.reponseText : 拿到响应数据
                   }
                   两个属性 
                   readyState:  通信状态
                      0:  请求为发送,还没调用open()
                      1:  请求已经建立,但是没有发送
                      2:  请求已经发送,正在处理中
                      3:  请求还在处理中,响应头部有部分数据可用
                      4:  响应以完成,可以获取响应了
                   status:  状态码
                      200: 表示ok
                      404: 未找到页面
                 }

  --Ajax 请求的数据类型
      字符串 | XML | JSON (主要的数据类型)
  JSON是JS的一个子集,是一种基于文本的数据交换格式 后缀名 .json
  特点:
     1. 易于程序员的编写与阅读
     2. json是目前网络上使用最广泛的数据格式,已经替代了XML
     3. 易于计算机的解析和生成
  支持的数据类型:
     Number String  Array Object  null

  创建json文件
      1. 数组
          ["张无忌","周芷若","赵敏"]

      2. 对象
          {
            "name1":"zhouzhiruo",
            "name2":"zhaomin",
            "name3":"zhangwuji"
          }

      3. 数组和对象的结合  - 1
          [
            {"歌手":"赵雷","演员":"鸟叔"},
            {"歌手":"林俊杰","演员":"吴磊"}
          ]

      4.数组和对象的结合  - 2
          {
            "歌手":["林俊杰","周杰伦","谢霆锋"],
            "演员":["吴磊","黄渤","郭德纲"]
          }     

  JSON的 API (JS)
      1. JSON.parse():  将JSON字符串 转化为 JS对象 
      2. JSON.stringify():  将JS对象 转化为 JSON字符串

  在客户端构建json格式的字符串        


     

     

